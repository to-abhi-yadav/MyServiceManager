/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
var AudioPlayerService = /** @class */ (function () {
    function AudioPlayerService() {
        this.playlist = [];
        this.indexSong = 0;
        this.currentTrack = new BehaviorSubject(this.playlist[this.indexSong]);
        this.currentTime = 0;
        this.duration = 0;
    }
    ;
    /**
     * @return {?}
     */
    AudioPlayerService.prototype.init = /**
     * @return {?}
     */
    function () {
        this.updateCurrentSong();
    };
    ;
    /**
     * @return {?}
     */
    AudioPlayerService.prototype.nextSong = /**
     * @return {?}
     */
    function () {
        if ((this.indexSong + 1) >= this.playlist.length) {
            this.indexSong = 0;
        }
        else {
            this.indexSong++;
        }
        this.updateCurrentSong();
    };
    ;
    /**
     * @return {?}
     */
    AudioPlayerService.prototype.previousSong = /**
     * @return {?}
     */
    function () {
        if ((this.indexSong - 1) < 0) {
            this.indexSong = (this.playlist.length - 1);
        }
        else {
            this.indexSong--;
        }
        this.updateCurrentSong();
    };
    ;
    /**
     * @return {?}
     */
    AudioPlayerService.prototype.resetPlaylist = /**
     * @return {?}
     */
    function () {
        this.indexSong = 0;
        this.updateCurrentSong();
    };
    ;
    /**
     * @param {?} index
     * @return {?}
     */
    AudioPlayerService.prototype.selectATrack = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.indexSong = index - 1;
        this.updateCurrentSong();
    };
    ;
    /**
     * @return {?}
     */
    AudioPlayerService.prototype.updateCurrentSong = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var current = this.playlist[this.indexSong];
        /** @type {?} */
        var previous = ((this.indexSong - 1) >= 0) ? this.playlist[this.indexSong - 1] : this.playlist[this.playlist.length - 1];
        /** @type {?} */
        var next = ((this.indexSong + 1) >= this.playlist.length) ? this.playlist[0] : this.playlist[this.indexSong + 1];
        this.currentTrack.next([
            previous,
            current,
            next
        ]);
    };
    ;
    /**
     * @return {?}
     */
    AudioPlayerService.prototype.getSubjectCurrentTrack = /**
     * @return {?}
     */
    function () {
        return this.currentTrack;
    };
    ;
    /**
     * @return {?}
     */
    AudioPlayerService.prototype.getPlaylist = /**
     * @return {?}
     */
    function () {
        return this.playlist;
    };
    ;
    /**
     * @param {?} playlist
     * @return {?}
     */
    AudioPlayerService.prototype.setPlaylist = /**
     * @param {?} playlist
     * @return {?}
     */
    function (playlist) {
        this.playlist = playlist;
    };
    /**
     * @return {?}
     */
    AudioPlayerService.prototype.getIndexSong = /**
     * @return {?}
     */
    function () {
        return this.indexSong;
    };
    AudioPlayerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AudioPlayerService.ctorParameters = function () { return []; };
    return AudioPlayerService;
}());
export { AudioPlayerService };
if (false) {
    /** @type {?} */
    AudioPlayerService.prototype.playlist;
    /** @type {?} */
    AudioPlayerService.prototype.indexSong;
    /** @type {?} */
    AudioPlayerService.prototype.currentTrack;
    /** @type {?} */
    AudioPlayerService.prototype.currentTime;
    /** @type {?} */
    AudioPlayerService.prototype.duration;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaW8tcGxheWVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYXVkaW8tcGxheWVyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvYXVkaW8tcGxheWVyLXNlcnZpY2UvYXVkaW8tcGxheWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUd2QztJQVVFO1FBUEEsYUFBUSxHQUFZLEVBQUUsQ0FBQztRQUV2QixjQUFTLEdBQVcsQ0FBQyxDQUFDO1FBQ3RCLGlCQUFZLEdBQXdCLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDdkYsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDeEIsYUFBUSxHQUFXLENBQUMsQ0FBQztJQUlyQixDQUFDO0lBQUEsQ0FBQzs7OztJQUVGLGlDQUFJOzs7SUFBSjtRQUNFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFBQSxDQUFDOzs7O0lBRUYscUNBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDaEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7U0FDcEI7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNsQjtRQUNELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFBQSxDQUFDOzs7O0lBRUYseUNBQVk7OztJQUFaO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUFBLENBQUM7Ozs7SUFFRiwwQ0FBYTs7O0lBQWI7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBQUEsQ0FBQzs7Ozs7SUFFRix5Q0FBWTs7OztJQUFaLFVBQWEsS0FBYTtRQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUFBLENBQUM7Ozs7SUFFRiw4Q0FBaUI7OztJQUFqQjs7WUFDTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDOztZQUN2QyxRQUFRLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7O1lBQ3BILElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBRWhILElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ3JCLFFBQVE7WUFDUixPQUFPO1lBQ1AsSUFBSTtTQUNMLENBQUMsQ0FBQztJQUNMLENBQUM7SUFBQSxDQUFDOzs7O0lBRUYsbURBQXNCOzs7SUFBdEI7UUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUFBLENBQUM7Ozs7SUFFRix3Q0FBVzs7O0lBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUFBLENBQUM7Ozs7O0lBRUYsd0NBQVc7Ozs7SUFBWCxVQUFZLFFBQWlCO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCx5Q0FBWTs7O0lBQVo7UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Z0JBeEVGLFVBQVU7Ozs7SUF5RVgseUJBQUM7Q0FBQSxBQXpFRCxJQXlFQztTQXhFWSxrQkFBa0I7OztJQUU3QixzQ0FBdUI7O0lBRXZCLHVDQUFzQjs7SUFDdEIsMENBQXVGOztJQUN2Rix5Q0FBd0I7O0lBQ3hCLHNDQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVHJhY2sgfSBmcm9tICcuLi8uLi9tb2RlbC90cmFjay5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBdWRpb1BsYXllclNlcnZpY2Uge1xuXG4gIHBsYXlsaXN0OiBUcmFja1tdID0gW107XG5cbiAgaW5kZXhTb25nOiBudW1iZXIgPSAwO1xuICBjdXJyZW50VHJhY2s6IEJlaGF2aW9yU3ViamVjdDx7fT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHRoaXMucGxheWxpc3RbdGhpcy5pbmRleFNvbmddKTtcbiAgY3VycmVudFRpbWU6IG51bWJlciA9IDA7XG4gIGR1cmF0aW9uOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH07XG5cbiAgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZUN1cnJlbnRTb25nKCk7XG4gIH07XG5cbiAgbmV4dFNvbmcoKTogdm9pZCB7XG4gICAgaWYgKCh0aGlzLmluZGV4U29uZyArIDEpID49IHRoaXMucGxheWxpc3QubGVuZ3RoKSB7XG4gICAgICB0aGlzLmluZGV4U29uZyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5kZXhTb25nKys7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlQ3VycmVudFNvbmcoKTtcbiAgfTtcblxuICBwcmV2aW91c1NvbmcoKTogdm9pZCB7XG4gICAgaWYgKCh0aGlzLmluZGV4U29uZyAtIDEpIDwgMCkge1xuICAgICAgdGhpcy5pbmRleFNvbmcgPSAodGhpcy5wbGF5bGlzdC5sZW5ndGggLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbmRleFNvbmctLTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVDdXJyZW50U29uZygpO1xuICB9O1xuXG4gIHJlc2V0UGxheWxpc3QoKTogdm9pZCB7XG4gICAgdGhpcy5pbmRleFNvbmcgPSAwO1xuICAgIHRoaXMudXBkYXRlQ3VycmVudFNvbmcoKTtcbiAgfTtcblxuICBzZWxlY3RBVHJhY2soaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuaW5kZXhTb25nID0gaW5kZXggLSAxO1xuICAgIHRoaXMudXBkYXRlQ3VycmVudFNvbmcoKTtcbiAgfTtcblxuICB1cGRhdGVDdXJyZW50U29uZygpOiB2b2lkIHtcbiAgICBsZXQgY3VycmVudCA9IHRoaXMucGxheWxpc3RbdGhpcy5pbmRleFNvbmddO1xuICAgIGxldCBwcmV2aW91cyA9ICgodGhpcy5pbmRleFNvbmcgLSAxKSA+PSAwKSA/IHRoaXMucGxheWxpc3RbdGhpcy5pbmRleFNvbmcgLSAxXSA6IHRoaXMucGxheWxpc3RbdGhpcy5wbGF5bGlzdC5sZW5ndGggLSAxXTtcbiAgICBsZXQgbmV4dCA9ICgodGhpcy5pbmRleFNvbmcgKyAxKSA+PSB0aGlzLnBsYXlsaXN0Lmxlbmd0aCkgPyB0aGlzLnBsYXlsaXN0WzBdIDogdGhpcy5wbGF5bGlzdFt0aGlzLmluZGV4U29uZyArIDFdO1xuICBcbiAgICB0aGlzLmN1cnJlbnRUcmFjay5uZXh0KFtcbiAgICAgIHByZXZpb3VzLFxuICAgICAgY3VycmVudCxcbiAgICAgIG5leHRcbiAgICBdKTtcbiAgfTtcblxuICBnZXRTdWJqZWN0Q3VycmVudFRyYWNrKCk6IEJlaGF2aW9yU3ViamVjdDx7fT4ge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRUcmFjaztcbiAgfTtcblxuICBnZXRQbGF5bGlzdCgpOiBUcmFja1tdIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5bGlzdDtcbiAgfTtcblxuICBzZXRQbGF5bGlzdChwbGF5bGlzdDogVHJhY2tbXSkge1xuICAgIHRoaXMucGxheWxpc3QgPSBwbGF5bGlzdDtcbiAgfVxuXG4gIGdldEluZGV4U29uZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXhTb25nO1xuICB9XG59Il19