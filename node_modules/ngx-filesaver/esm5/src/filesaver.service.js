import { Injectable } from '@angular/core';
import { saveAs } from 'file-saver';
import * as i0 from "@angular/core";
var FileSaverService = /** @class */ (function () {
    function FileSaverService() {
    }
    FileSaverService.prototype.genType = function (fileName) {
        if (!fileName || fileName.lastIndexOf('.') === -1)
            return 'text/plain';
        var type = fileName.substr(fileName.lastIndexOf('.') + 1);
        switch (type) {
            case 'txt':
                return 'text/plain';
            case 'xml':
            case 'html':
                return "text/" + type;
            case 'json':
                return 'octet/stream';
            default:
                return "application/" + type;
        }
    };
    FileSaverService.prototype.save = function (blob, fileName, filtType) {
        if (!blob) {
            throw new Error('Muse spcify blod argument');
        }
        saveAs(new Blob([blob], { type: filtType || blob.type || this.genType(fileName) }), decodeURI(fileName || 'download'));
    };
    FileSaverService.prototype.saveText = function (txt, fileName) {
        var blob = new Blob([txt]);
        this.save(blob, fileName);
    };
    FileSaverService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    FileSaverService.ngInjectableDef = i0.defineInjectable({ factory: function FileSaverService_Factory() { return new FileSaverService(); }, token: FileSaverService, providedIn: "root" });
    return FileSaverService;
}());
export { FileSaverService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZmlsZXNhdmVyLyIsInNvdXJjZXMiOlsic3JjL2ZpbGVzYXZlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQzs7QUFFcEM7SUFBQTtLQThCQztJQTVCQyxrQ0FBTyxHQUFQLFVBQVEsUUFBaUI7UUFDdkIsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFFLE9BQU8sWUFBWSxDQUFDO1FBQ3ZFLElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1RCxRQUFRLElBQUksRUFBRTtZQUNaLEtBQUssS0FBSztnQkFDUixPQUFPLFlBQVksQ0FBQztZQUN0QixLQUFLLEtBQUssQ0FBQztZQUNYLEtBQUssTUFBTTtnQkFDVCxPQUFPLFVBQVEsSUFBTSxDQUFDO1lBQ3hCLEtBQUssTUFBTTtnQkFDVCxPQUFPLGNBQWMsQ0FBQztZQUN4QjtnQkFDRSxPQUFPLGlCQUFlLElBQU0sQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRCwrQkFBSSxHQUFKLFVBQUssSUFBVSxFQUFFLFFBQWlCLEVBQUUsUUFBaUI7UUFDbkQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztTQUM5QztRQUVELE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQztJQUN6SCxDQUFDO0lBRUQsbUNBQVEsR0FBUixVQUFTLEdBQVcsRUFBRSxRQUFpQjtRQUNyQyxJQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Z0JBN0JGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OzsyQkFIbEM7Q0FpQ0MsQUE5QkQsSUE4QkM7U0E3QlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgc2F2ZUFzIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRmlsZVNhdmVyU2VydmljZSB7XG4gIGdlblR5cGUoZmlsZU5hbWU/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICghZmlsZU5hbWUgfHwgZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSA9PT0gLTEpIHJldHVybiAndGV4dC9wbGFpbic7XG4gICAgY29uc3QgdHlwZSA9IGZpbGVOYW1lLnN1YnN0cihmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpICsgMSk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICd0eHQnOlxuICAgICAgICByZXR1cm4gJ3RleHQvcGxhaW4nO1xuICAgICAgY2FzZSAneG1sJzpcbiAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICByZXR1cm4gYHRleHQvJHt0eXBlfWA7XG4gICAgICBjYXNlICdqc29uJzpcbiAgICAgICAgcmV0dXJuICdvY3RldC9zdHJlYW0nO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGBhcHBsaWNhdGlvbi8ke3R5cGV9YDtcbiAgICB9XG4gIH1cblxuICBzYXZlKGJsb2I6IEJsb2IsIGZpbGVOYW1lPzogc3RyaW5nLCBmaWx0VHlwZT86IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICghYmxvYikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXNlIHNwY2lmeSBibG9kIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgc2F2ZUFzKG5ldyBCbG9iKFtibG9iXSwgeyB0eXBlOiBmaWx0VHlwZSB8fCBibG9iLnR5cGUgfHwgdGhpcy5nZW5UeXBlKGZpbGVOYW1lKSB9KSwgZGVjb2RlVVJJKGZpbGVOYW1lIHx8ICdkb3dubG9hZCcpKTtcbiAgfVxuXG4gIHNhdmVUZXh0KHR4dDogc3RyaW5nLCBmaWxlTmFtZT86IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbdHh0XSk7XG4gICAgdGhpcy5zYXZlKGJsb2IsIGZpbGVOYW1lKTtcbiAgfVxufVxuIl19