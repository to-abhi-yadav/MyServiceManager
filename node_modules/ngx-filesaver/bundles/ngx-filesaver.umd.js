(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('file-saver'), require('@angular/common/http'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngxFileSaver', ['exports', 'file-saver', '@angular/common/http', '@angular/core'], factory) :
    (factory((global.ngxFileSaver = {}),global.saveAs,global.ng.common.http,global.ng.core));
}(this, (function (exports,fileSaver,http,i0) { 'use strict';

    var FileSaverService = /** @class */ (function () {
        function FileSaverService() {
        }
        FileSaverService.prototype.genType = function (fileName) {
            if (!fileName || fileName.lastIndexOf('.') === -1)
                return 'text/plain';
            var type = fileName.substr(fileName.lastIndexOf('.') + 1);
            switch (type) {
                case 'txt':
                    return 'text/plain';
                case 'xml':
                case 'html':
                    return "text/" + type;
                case 'json':
                    return 'octet/stream';
                default:
                    return "application/" + type;
            }
        };
        FileSaverService.prototype.save = function (blob, fileName, filtType) {
            if (!blob) {
                throw new Error('Muse spcify blod argument');
            }
            fileSaver.saveAs(new Blob([blob], { type: filtType || blob.type || this.genType(fileName) }), decodeURI(fileName || 'download'));
        };
        FileSaverService.prototype.saveText = function (txt, fileName) {
            var blob = new Blob([txt]);
            this.save(blob, fileName);
        };
        FileSaverService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        FileSaverService.ngInjectableDef = i0.defineInjectable({ factory: function FileSaverService_Factory() { return new FileSaverService(); }, token: FileSaverService, providedIn: "root" });
        return FileSaverService;
    }());

    var FileSaverDirective = /** @class */ (function () {
        function FileSaverDirective(el, _FileSaverService, _httpClient) {
            this.el = el;
            this._FileSaverService = _FileSaverService;
            this._httpClient = _httpClient;
            this.method = 'GET';
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
        }
        FileSaverDirective.prototype.getName = function (res) {
            return decodeURI(this.fileName ||
                res.headers.get('filename') ||
                res.headers.get('x-filename'));
        };
        FileSaverDirective.prototype._click = function () {
            var _this = this;
            var _http = this.http;
            if (!_http) {
                var params = new http.HttpParams(), _data = this.query || {};
                // tslint:disable-next-line:forin
                for (var item in _data) {
                    params.set(item, _data[item]);
                }
                _http = this._httpClient.request(this.method, this.url, {
                    observe: 'response',
                    responseType: 'blob',
                    headers: this.header,
                    params: params
                });
            }
            this.el.nativeElement.disabled = true;
            _http.subscribe(function (res) {
                if (res.status !== 200 || res.body.size <= 0) {
                    _this.error.emit(res);
                    return;
                }
                _this._FileSaverService.save(res.body, _this.getName(res));
                _this.success.emit(res);
            }, function (err) {
                _this.error.emit(err);
            }, function () {
                _this.el.nativeElement.disabled = false;
            });
        };
        FileSaverDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[fileSaver]',
                        exportAs: 'fileSaver'
                    },] }
        ];
        /** @nocollapse */
        FileSaverDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: FileSaverService },
                { type: http.HttpClient }
            ];
        };
        FileSaverDirective.propDecorators = {
            method: [{ type: i0.Input }],
            http: [{ type: i0.Input }],
            query: [{ type: i0.Input }],
            header: [{ type: i0.Input }],
            url: [{ type: i0.Input }],
            fileName: [{ type: i0.Input }],
            success: [{ type: i0.Output }],
            error: [{ type: i0.Output }],
            _click: [{ type: i0.HostListener, args: ['click',] }]
        };
        return FileSaverDirective;
    }());

    var FileSaverModule = /** @class */ (function () {
        function FileSaverModule() {
        }
        FileSaverModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [FileSaverDirective],
                        exports: [FileSaverDirective],
                    },] }
        ];
        return FileSaverModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FileSaverService = FileSaverService;
    exports.FileSaverDirective = FileSaverDirective;
    exports.FileSaverModule = FileSaverModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-filesaver.umd.js.map