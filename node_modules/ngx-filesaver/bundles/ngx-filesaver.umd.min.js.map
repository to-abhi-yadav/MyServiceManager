{"version":3,"sources":["ng://ngx-filesaver/src/filesaver.service.ts","ng://ngx-filesaver/src/filesaver.directive.ts","ng://ngx-filesaver/src/filesaver.module.ts"],"names":["FileSaverService","prototype","genType","fileName","lastIndexOf","type","substr","save","blob","filtType","Error","saveAs","Blob","this","decodeURI","saveText","txt","Injectable","args","providedIn","FileSaverDirective","el","_FileSaverService","_httpClient","method","success","EventEmitter","error","getName","res","headers","get","_click","_this","_http","http","params","HttpParams","_data","query","item","set","request","url","observe","responseType","header","nativeElement","disabled","subscribe","status","body","size","emit","err","Directive","selector","exportAs","ElementRef","HttpClient","Input","Output","HostListener","FileSaverModule","NgModule","declarations","exports"],"mappings":"4YAGA,SAAAA,YAEEA,EAAAC,UAAAC,QAAA,SAAQC,GACN,IAAKA,IAA2C,IAA/BA,EAASC,YAAY,KAAa,MAAO,aAC1D,IAAMC,EAAOF,EAASG,OAAOH,EAASC,YAAY,KAAO,GACzD,OAAQC,GACN,IAAK,MACH,MAAO,aACT,IAAK,MACL,IAAK,OACH,MAAO,QAAQA,EACjB,IAAK,OACH,MAAO,eACT,QACE,MAAO,eAAeA,IAI5BL,EAAAC,UAAAM,KAAA,SAAKC,EAAYL,EAAmBM,GAClC,IAAKD,EACH,MAAM,IAAIE,MAAM,6BAGlBC,EAAAA,OAAO,IAAIC,KAAK,CAACJ,GAAO,CAAEH,KAAMI,GAAYD,EAAKH,MAAQQ,KAAKX,QAAQC,KAAcW,UAAUX,GAAY,cAG5GH,EAAAC,UAAAc,SAAA,SAASC,EAAab,GACpB,IAAMK,EAAO,IAAII,KAAK,CAACI,IACvBH,KAAKN,KAAKC,EAAML,wBA5BnBc,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,gICwBxB,SAAAC,EACUC,EACAC,EACAC,GAFAV,KAAAQ,GAAAA,EACAR,KAAAS,kBAAAA,EACAT,KAAAU,YAAAA,EAZDV,KAAAW,OAAS,MAMCX,KAAAY,QAAU,IAAIC,EAAAA,aACdb,KAAAc,MAAQ,IAAID,EAAAA,aAqDjC,OA7CUN,EAAAnB,UAAA2B,QAAR,SAAgBC,GACd,OAAOf,UACLD,KAAKV,UACL0B,EAAIC,QAAQC,IAAI,aAChBF,EAAIC,QAAQC,IAAI,gBAKpBX,EAAAnB,UAAA+B,OADA,WAAA,IAAAC,EAAApB,KAEMqB,EAAQrB,KAAKsB,KACjB,IAAKD,EAAO,CACV,IAAME,EAAS,IAAIC,EAAAA,WACjBC,EAAQzB,KAAK0B,OAAS,GAExB,IAAK,IAAMC,KAAQF,EACjBF,EAAOK,IAAID,EAAMF,EAAME,IAGzBN,EAAQrB,KAAKU,YAAYmB,QAAQ7B,KAAKW,OAAQX,KAAK8B,IAAK,CACtDC,QAAS,WACTC,aAAc,OACdf,QAASjB,KAAKiC,OACdV,OAAMA,IAIVvB,KAAKQ,GAAG0B,cAAcC,UAAW,EACjCd,EAAMe,UACJ,SAAApB,GACqB,MAAfA,EAAIqB,QAAkBrB,EAAIsB,KAAKC,MAAQ,EACzCnB,EAAKN,MAAM0B,KAAKxB,IAGlBI,EAAKX,kBAAkBf,KAAKsB,EAAIsB,KAAMlB,EAAKL,QAAQC,IACnDI,EAAKR,QAAQ4B,KAAKxB,KAEpB,SAAAyB,GACErB,EAAKN,MAAM0B,KAAKC,IAElB,WACErB,EAAKZ,GAAG0B,cAAcC,UAAW,yBA7DxCO,EAAAA,UAASrC,KAAA,CAAC,CACTsC,SAAU,cACVC,SAAU,yDAbVC,EAAAA,kBASO1D,SAHA2D,EAAAA,8CAUNC,EAAAA,oBACAA,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,mBACAA,EAAAA,wBACAA,EAAAA,uBACAC,EAAAA,sBACAA,EAAAA,uBAgBAC,EAAAA,aAAY5C,KAAA,CAAC,YAqChBE,kBC1EA,SAAA2C,KAI8B,2BAJ7BC,EAAAA,SAAQ9C,KAAA,CAAC,CACR+C,aAAc,CAAC7C,GACf8C,QAAS,CAAC9C,OAEkB2C","sourcesContent":["import { Injectable } from '@angular/core';\nimport { saveAs } from 'file-saver';\n\n@Injectable({ providedIn: 'root' })\nexport class FileSaverService {\n  genType(fileName?: string): string {\n    if (!fileName || fileName.lastIndexOf('.') === -1) return 'text/plain';\n    const type = fileName.substr(fileName.lastIndexOf('.') + 1);\n    switch (type) {\n      case 'txt':\n        return 'text/plain';\n      case 'xml':\n      case 'html':\n        return `text/${type}`;\n      case 'json':\n        return 'octet/stream';\n      default:\n        return `application/${type}`;\n    }\n  }\n\n  save(blob: Blob, fileName?: string, filtType?: string): void {\n    if (!blob) {\n      throw new Error('Muse spcify blod argument');\n    }\n\n    saveAs(new Blob([blob], { type: filtType || blob.type || this.genType(fileName) }), decodeURI(fileName || 'download'));\n  }\n\n  saveText(txt: string, fileName?: string): void {\n    const blob = new Blob([txt]);\n    this.save(blob, fileName);\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  HostListener,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { FileSaverService } from './filesaver.service';\n\n@Directive({\n  selector: '[fileSaver]',\n  exportAs: 'fileSaver'\n})\nexport class FileSaverDirective {\n  @Input() method = 'GET';\n  @Input() http: Observable<HttpResponse<Blob>>;\n  @Input() query: any;\n  @Input() header: any;\n  @Input() url: string;\n  @Input() fileName: string;\n  @Output() readonly success = new EventEmitter<any>();\n  @Output() readonly error = new EventEmitter<any>();\n\n  constructor(\n    private el: ElementRef,\n    private _FileSaverService: FileSaverService,\n    private _httpClient: HttpClient,\n  ) {}\n\n  private getName(res: HttpResponse<Blob>) {\n    return decodeURI(\n      this.fileName ||\n      res.headers.get('filename') ||\n      res.headers.get('x-filename')\n    );\n  }\n\n  @HostListener('click')\n  _click() {\n    let _http = this.http;\n    if (!_http) {\n      const params = new HttpParams(),\n        _data = this.query || {};\n      // tslint:disable-next-line:forin\n      for (const item in _data) {\n        params.set(item, _data[item]);\n      }\n\n      _http = this._httpClient.request(this.method, this.url, {\n        observe: 'response',\n        responseType: 'blob',\n        headers: this.header,\n        params\n      });\n    }\n\n    this.el.nativeElement.disabled = true;\n    _http.subscribe(\n      res => {\n        if (res.status !== 200 || res.body.size <= 0) {\n          this.error.emit(res);\n          return;\n        }\n        this._FileSaverService.save(res.body, this.getName(res));\n        this.success.emit(res);\n      },\n      err => {\n        this.error.emit(err);\n      },\n      () => {\n        this.el.nativeElement.disabled = false;\n      },\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { FileSaverDirective } from './filesaver.directive';\n\n@NgModule({\n  declarations: [FileSaverDirective],\n  exports: [FileSaverDirective],\n})\nexport class FileSaverModule {}\n"]}