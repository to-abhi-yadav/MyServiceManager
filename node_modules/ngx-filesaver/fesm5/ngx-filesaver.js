import { saveAs } from 'file-saver';
import { HttpClient, HttpParams } from '@angular/common/http';
import 'rxjs';
import { Injectable, NgModule, Directive, ElementRef, Input, HostListener, EventEmitter, Output, defineInjectable } from '@angular/core';

var FileSaverService = /** @class */ (function () {
    function FileSaverService() {
    }
    FileSaverService.prototype.genType = function (fileName) {
        if (!fileName || fileName.lastIndexOf('.') === -1)
            return 'text/plain';
        var type = fileName.substr(fileName.lastIndexOf('.') + 1);
        switch (type) {
            case 'txt':
                return 'text/plain';
            case 'xml':
            case 'html':
                return "text/" + type;
            case 'json':
                return 'octet/stream';
            default:
                return "application/" + type;
        }
    };
    FileSaverService.prototype.save = function (blob, fileName, filtType) {
        if (!blob) {
            throw new Error('Muse spcify blod argument');
        }
        saveAs(new Blob([blob], { type: filtType || blob.type || this.genType(fileName) }), decodeURI(fileName || 'download'));
    };
    FileSaverService.prototype.saveText = function (txt, fileName) {
        var blob = new Blob([txt]);
        this.save(blob, fileName);
    };
    FileSaverService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    FileSaverService.ngInjectableDef = defineInjectable({ factory: function FileSaverService_Factory() { return new FileSaverService(); }, token: FileSaverService, providedIn: "root" });
    return FileSaverService;
}());

var FileSaverDirective = /** @class */ (function () {
    function FileSaverDirective(el, _FileSaverService, _httpClient) {
        this.el = el;
        this._FileSaverService = _FileSaverService;
        this._httpClient = _httpClient;
        this.method = 'GET';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
    }
    FileSaverDirective.prototype.getName = function (res) {
        return decodeURI(this.fileName ||
            res.headers.get('filename') ||
            res.headers.get('x-filename'));
    };
    FileSaverDirective.prototype._click = function () {
        var _this = this;
        var _http = this.http;
        if (!_http) {
            var params = new HttpParams(), _data = this.query || {};
            // tslint:disable-next-line:forin
            for (var item in _data) {
                params.set(item, _data[item]);
            }
            _http = this._httpClient.request(this.method, this.url, {
                observe: 'response',
                responseType: 'blob',
                headers: this.header,
                params: params
            });
        }
        this.el.nativeElement.disabled = true;
        _http.subscribe(function (res) {
            if (res.status !== 200 || res.body.size <= 0) {
                _this.error.emit(res);
                return;
            }
            _this._FileSaverService.save(res.body, _this.getName(res));
            _this.success.emit(res);
        }, function (err) {
            _this.error.emit(err);
        }, function () {
            _this.el.nativeElement.disabled = false;
        });
    };
    FileSaverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fileSaver]',
                    exportAs: 'fileSaver'
                },] }
    ];
    /** @nocollapse */
    FileSaverDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FileSaverService },
        { type: HttpClient }
    ]; };
    FileSaverDirective.propDecorators = {
        method: [{ type: Input }],
        http: [{ type: Input }],
        query: [{ type: Input }],
        header: [{ type: Input }],
        url: [{ type: Input }],
        fileName: [{ type: Input }],
        success: [{ type: Output }],
        error: [{ type: Output }],
        _click: [{ type: HostListener, args: ['click',] }]
    };
    return FileSaverDirective;
}());

var FileSaverModule = /** @class */ (function () {
    function FileSaverModule() {
    }
    FileSaverModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FileSaverDirective],
                    exports: [FileSaverDirective],
                },] }
    ];
    return FileSaverModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { FileSaverService, FileSaverDirective, FileSaverModule };

//# sourceMappingURL=ngx-filesaver.js.map